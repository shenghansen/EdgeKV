// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/HttpService.proto

#include "utill/HttpService.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class HttpRequestDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpRequest>
      _instance;
} _HttpRequest_default_instance_;
class HttpResponseDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpResponse>
      _instance;
} _HttpResponse_default_instance_;
static void InitDefaultsscc_info_HttpRequest_proto_2fHttpService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::_HttpRequest_default_instance_;
    new (ptr)::HttpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_HttpRequest_proto_2fHttpService_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_HttpRequest_proto_2fHttpService_2eproto},
        {}};

static void InitDefaultsscc_info_HttpResponse_proto_2fHttpService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::_HttpResponse_default_instance_;
    new (ptr)::HttpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_HttpResponse_proto_2fHttpService_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_HttpResponse_proto_2fHttpService_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_proto_2fHttpService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const *
    *file_level_enum_descriptors_proto_2fHttpService_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor
    *file_level_service_descriptors_proto_2fHttpService_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fHttpService_2eproto::
    offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HttpRequest, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HttpResponse, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::HttpRequest)},
        {5, -1, sizeof(::HttpResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::_HttpRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::_HttpResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fHttpService_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\027proto/HttpService.proto\"\r\n\013HttpRequest"
        "\"\016\n\014HttpResponse2y\n\013HttpService\022\"\n\003Get\022\014"
        ".HttpRequest\032\r.HttpResponse\022\"\n\003Put\022\014.Htt"
        "pRequest\032\r.HttpResponse\022\"\n\003Del\022\014.HttpReq"
        "uest\032\r.HttpResponseB\003\200\001\001b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    *const descriptor_table_proto_2fHttpService_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase
    *const descriptor_table_proto_2fHttpService_2eproto_sccs[2] = {
        &scc_info_HttpRequest_proto_2fHttpService_2eproto.base,
        &scc_info_HttpResponse_proto_2fHttpService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_proto_2fHttpService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2fHttpService_2eproto = {
        false,
        false,
        descriptor_table_protodef_proto_2fHttpService_2eproto,
        "proto/HttpService.proto",
        192,
        &descriptor_table_proto_2fHttpService_2eproto_once,
        descriptor_table_proto_2fHttpService_2eproto_sccs,
        descriptor_table_proto_2fHttpService_2eproto_deps,
        2,
        0,
        schemas,
        file_default_instances,
        TableStruct_proto_2fHttpService_2eproto::offsets,
        file_level_metadata_proto_2fHttpService_2eproto,
        2,
        file_level_enum_descriptors_proto_2fHttpService_2eproto,
        file_level_service_descriptors_proto_2fHttpService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fHttpService_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_proto_2fHttpService_2eproto)),
     true);

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {}
class HttpRequest::_Internal {
public:
};

HttpRequest::HttpRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HttpRequest)
}

void HttpRequest::SharedCtor() {}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:HttpRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HttpRequest::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void HttpRequest::ArenaDtor(void *object) {
  HttpRequest *_this = reinterpret_cast<HttpRequest *>(object);
  (void)_this;
}
void HttpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void HttpRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const HttpRequest &HttpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_HttpRequest_proto_2fHttpService_2eproto.base);
  return *internal_default_instance();
}

void HttpRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *HttpRequest::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  } // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *HttpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:HttpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpRequest>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void HttpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:HttpRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:HttpRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const { return true; }

void HttpRequest::InternalSwap(HttpRequest *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpRequest::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void HttpResponse::InitAsDefaultInstance() {}
class HttpResponse::_Internal {
public:
};

HttpResponse::HttpResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HttpResponse)
}
HttpResponse::HttpResponse(const HttpResponse &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HttpResponse)
}

void HttpResponse::SharedCtor() {}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:HttpResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HttpResponse::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void HttpResponse::ArenaDtor(void *object) {
  HttpResponse *_this = reinterpret_cast<HttpResponse *>(object);
  (void)_this;
}
void HttpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void HttpResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }
const HttpResponse &HttpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_HttpResponse_proto_2fHttpService_2eproto.base);
  return *internal_default_instance();
}

void HttpResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:HttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *HttpResponse::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_
            .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  } // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *HttpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpResponse)
  return target;
}

size_t HttpResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:HttpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpResponse *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpResponse>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpResponse)
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void HttpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:HttpResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:HttpResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const { return true; }

void HttpResponse::InternalSwap(HttpResponse *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResponse::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

HttpService::~HttpService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor *HttpService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fHttpService_2eproto);
  return file_level_service_descriptors_proto_2fHttpService_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor *HttpService::GetDescriptor() {
  return descriptor();
}

void HttpService::Get(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                      const ::HttpRequest *, ::HttpResponse *,
                      ::google::protobuf::Closure *done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void HttpService::Put(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                      const ::HttpRequest *, ::HttpResponse *,
                      ::google::protobuf::Closure *done) {
  controller->SetFailed("Method Put() not implemented.");
  done->Run();
}

void HttpService::Del(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                      const ::HttpRequest *, ::HttpResponse *,
                      ::google::protobuf::Closure *done) {
  controller->SetFailed("Method Del() not implemented.");
  done->Run();
}

void HttpService::CallMethod(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method,
    ::PROTOBUF_NAMESPACE_ID::RpcController *controller,
    const ::PROTOBUF_NAMESPACE_ID::Message *request,
    ::PROTOBUF_NAMESPACE_ID::Message *response,
    ::google::protobuf::Closure *done) {
  GOOGLE_DCHECK_EQ(
      method->service(),
      file_level_service_descriptors_proto_2fHttpService_2eproto[0]);
  switch (method->index()) {
  case 0:
    Get(controller,
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::HttpRequest *>(
            request),
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::HttpResponse *>(response),
        done);
    break;
  case 1:
    Put(controller,
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::HttpRequest *>(
            request),
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::HttpResponse *>(response),
        done);
    break;
  case 2:
    Del(controller,
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::HttpRequest *>(
            request),
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::HttpResponse *>(response),
        done);
    break;
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message &HttpService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
  case 0:
    return ::HttpRequest::default_instance();
  case 1:
    return ::HttpRequest::default_instance();
  case 2:
    return ::HttpRequest::default_instance();
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message &HttpService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
  case 0:
    return ::HttpResponse::default_instance();
  case 1:
    return ::HttpResponse::default_instance();
  case 2:
    return ::HttpResponse::default_instance();
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                ->GetPrototype(method->output_type());
  }
}

HttpService_Stub::HttpService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel *channel)
    : channel_(channel), owns_channel_(false) {}
HttpService_Stub::HttpService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel *channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
HttpService_Stub::~HttpService_Stub() {
  if (owns_channel_)
    delete channel_;
}

void HttpService_Stub::Get(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                           const ::HttpRequest *request,
                           ::HttpResponse *response,
                           ::google::protobuf::Closure *done) {
  channel_->CallMethod(descriptor()->method(0), controller, request, response,
                       done);
}
void HttpService_Stub::Put(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                           const ::HttpRequest *request,
                           ::HttpResponse *response,
                           ::google::protobuf::Closure *done) {
  channel_->CallMethod(descriptor()->method(1), controller, request, response,
                       done);
}
void HttpService_Stub::Del(::PROTOBUF_NAMESPACE_ID::RpcController *controller,
                           const ::HttpRequest *request,
                           ::HttpResponse *response,
                           ::google::protobuf::Closure *done) {
  channel_->CallMethod(descriptor()->method(2), controller, request, response,
                       done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::HttpRequest *
Arena::CreateMaybeMessage<::HttpRequest>(Arena *arena) {
  return Arena::CreateMessageInternal<::HttpRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::HttpResponse *
Arena::CreateMaybeMessage<::HttpResponse>(Arena *arena) {
  return Arena::CreateMessageInternal<::HttpResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
