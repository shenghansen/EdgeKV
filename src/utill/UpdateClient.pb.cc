// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/UpdateClient.proto

#include "utill/UpdateClient.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class UpdateClientRequestDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateClientRequest>
      _instance;
} _UpdateClientRequest_default_instance_;
class UpdateClientResponseDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateClientResponse>
      _instance;
} _UpdateClientResponse_default_instance_;
static void
InitDefaultsscc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::_UpdateClientRequest_default_instance_;
    new (ptr)::UpdateClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto},
        {}};

static void
InitDefaultsscc_info_UpdateClientResponse_proto_2fUpdateClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::_UpdateClientResponse_default_instance_;
    new (ptr)::UpdateClientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateClientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_UpdateClientResponse_proto_2fUpdateClient_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_UpdateClientResponse_proto_2fUpdateClient_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_proto_2fUpdateClient_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const *
    *file_level_enum_descriptors_proto_2fUpdateClient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor
    *file_level_service_descriptors_proto_2fUpdateClient_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fUpdateClient_2eproto::
    offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::UpdateClientRequest, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::UpdateClientRequest, exist_),
        PROTOBUF_FIELD_OFFSET(::UpdateClientRequest, key_),
        PROTOBUF_FIELD_OFFSET(::UpdateClientRequest, value_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::UpdateClientResponse, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::UpdateClientResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::UpdateClientRequest)},
        {8, -1, sizeof(::UpdateClientResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::_UpdateClientRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::_UpdateClientResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fUpdateClient_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\030proto/UpdateClient.proto\"@\n\023UpdateClie"
        "ntRequest\022\r\n\005exist\030\001 \001(\010\022\013\n\003key\030\002 "
        "\001(\t\022\r\n"
        "\005value\030\003 \001(\t\"&\n\024UpdateClientResponse\022\016\n\006"
        "status\030\001 \001(\0102L\n\023UpdateClientService\0225\n\006U"
        "pdate\022\024.UpdateClientRequest\032\025.UpdateClie"
        "ntResponseB\003\200\001\001b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    *const descriptor_table_proto_2fUpdateClient_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase
    *const descriptor_table_proto_2fUpdateClient_2eproto_sccs[2] = {
        &scc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto.base,
        &scc_info_UpdateClientResponse_proto_2fUpdateClient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_proto_2fUpdateClient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2fUpdateClient_2eproto = {
        false,
        false,
        descriptor_table_protodef_proto_2fUpdateClient_2eproto,
        "proto/UpdateClient.proto",
        223,
        &descriptor_table_proto_2fUpdateClient_2eproto_once,
        descriptor_table_proto_2fUpdateClient_2eproto_sccs,
        descriptor_table_proto_2fUpdateClient_2eproto_deps,
        2,
        0,
        schemas,
        file_default_instances,
        TableStruct_proto_2fUpdateClient_2eproto::offsets,
        file_level_metadata_proto_2fUpdateClient_2eproto,
        2,
        file_level_enum_descriptors_proto_2fUpdateClient_2eproto,
        file_level_service_descriptors_proto_2fUpdateClient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fUpdateClient_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_proto_2fUpdateClient_2eproto)),
     true);

// ===================================================================

void UpdateClientRequest::InitAsDefaultInstance() {}
class UpdateClientRequest::_Internal {
public:
};

UpdateClientRequest::UpdateClientRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateClientRequest)
}
UpdateClientRequest::UpdateClientRequest(const UpdateClientRequest &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  key_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             from._internal_key(), GetArena());
  }
  value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_value(), GetArena());
  }
  exist_ = from.exist_;
  // @@protoc_insertion_point(copy_constructor:UpdateClientRequest)
}

void UpdateClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto.base);
  key_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exist_ = false;
}

UpdateClientRequest::~UpdateClientRequest() {
  // @@protoc_insertion_point(destructor:UpdateClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateClientRequest::ArenaDtor(void *object) {
  UpdateClientRequest *_this = reinterpret_cast<UpdateClientRequest *>(object);
  (void)_this;
}
void UpdateClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void UpdateClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateClientRequest &UpdateClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdateClientRequest_proto_2fUpdateClient_2eproto.base);
  return *internal_default_instance();
}

void UpdateClientRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:UpdateClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  key_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  value_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  exist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *UpdateClientRequest::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // bool exist = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // string key = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_key();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
            str, ptr, ctx);
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
            str, "UpdateClientRequest.key"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // string value = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_value();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
            str, ptr, ctx);
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
            str, "UpdateClientRequest.value"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *UpdateClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // bool exist = 1;
  if (this->exist() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_exist(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_key().data(),
        static_cast<int>(this->_internal_key().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "UpdateClientRequest.key");
    target = stream->WriteStringMaybeAliased(2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_value().data(),
        static_cast<int>(this->_internal_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "UpdateClientRequest.value");
    target =
        stream->WriteStringMaybeAliased(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateClientRequest)
  return target;
}

size_t UpdateClientRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:UpdateClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_value());
  }

  // bool exist = 1;
  if (this->exist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateClientRequest::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:UpdateClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClientRequest *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateClientRequest>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateClientRequest)
    MergeFrom(*source);
  }
}

void UpdateClientRequest::MergeFrom(const UpdateClientRequest &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:UpdateClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.exist() != 0) {
    _internal_set_exist(from._internal_exist());
  }
}

void UpdateClientRequest::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:UpdateClientRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UpdateClientRequest::CopyFrom(const UpdateClientRequest &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:UpdateClientRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UpdateClientRequest::IsInitialized() const { return true; }

void UpdateClientRequest::InternalSwap(UpdateClientRequest *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  key_.Swap(&other->key_,
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            GetArena());
  value_.Swap(&other->value_,
              &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              GetArena());
  swap(exist_, other->exist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateClientRequest::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void UpdateClientResponse::InitAsDefaultInstance() {}
class UpdateClientResponse::_Internal {
public:
};

UpdateClientResponse::UpdateClientResponse(
    ::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateClientResponse)
}
UpdateClientResponse::UpdateClientResponse(const UpdateClientResponse &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:UpdateClientResponse)
}

void UpdateClientResponse::SharedCtor() { status_ = false; }

UpdateClientResponse::~UpdateClientResponse() {
  // @@protoc_insertion_point(destructor:UpdateClientResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateClientResponse::ArenaDtor(void *object) {
  UpdateClientResponse *_this =
      reinterpret_cast<UpdateClientResponse *>(object);
  (void)_this;
}
void UpdateClientResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void UpdateClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateClientResponse &UpdateClientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UpdateClientResponse_proto_2fUpdateClient_2eproto.base);
  return *internal_default_instance();
}

void UpdateClientResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:UpdateClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *UpdateClientResponse::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // bool status = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *UpdateClientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
            1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateClientResponse)
  return target;
}

size_t UpdateClientResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:UpdateClientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateClientResponse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:UpdateClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClientResponse *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateClientResponse>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateClientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateClientResponse)
    MergeFrom(*source);
  }
}

void UpdateClientResponse::MergeFrom(const UpdateClientResponse &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:UpdateClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UpdateClientResponse::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:UpdateClientResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UpdateClientResponse::CopyFrom(const UpdateClientResponse &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:UpdateClientResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UpdateClientResponse::IsInitialized() const { return true; }

void UpdateClientResponse::InternalSwap(UpdateClientResponse *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateClientResponse::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

UpdateClientService::~UpdateClientService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor *
UpdateClientService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fUpdateClient_2eproto);
  return file_level_service_descriptors_proto_2fUpdateClient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor *
UpdateClientService::GetDescriptor() {
  return descriptor();
}

void UpdateClientService::Update(
    ::PROTOBUF_NAMESPACE_ID::RpcController *controller,
    const ::UpdateClientRequest *, ::UpdateClientResponse *,
    ::google::protobuf::Closure *done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void UpdateClientService::CallMethod(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method,
    ::PROTOBUF_NAMESPACE_ID::RpcController *controller,
    const ::PROTOBUF_NAMESPACE_ID::Message *request,
    ::PROTOBUF_NAMESPACE_ID::Message *response,
    ::google::protobuf::Closure *done) {
  GOOGLE_DCHECK_EQ(
      method->service(),
      file_level_service_descriptors_proto_2fUpdateClient_2eproto[0]);
  switch (method->index()) {
  case 0:
    Update(
        controller,
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
            const ::UpdateClientRequest *>(request),
        ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UpdateClientResponse *>(
            response),
        done);
    break;
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message &
UpdateClientService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
  case 0:
    return ::UpdateClientRequest::default_instance();
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message &
UpdateClientService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor *method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
  case 0:
    return ::UpdateClientResponse::default_instance();
  default:
    GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
    return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                ->GetPrototype(method->output_type());
  }
}

UpdateClientService_Stub::UpdateClientService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel *channel)
    : channel_(channel), owns_channel_(false) {}
UpdateClientService_Stub::UpdateClientService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel *channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UpdateClientService_Stub::~UpdateClientService_Stub() {
  if (owns_channel_)
    delete channel_;
}

void UpdateClientService_Stub::Update(
    ::PROTOBUF_NAMESPACE_ID::RpcController *controller,
    const ::UpdateClientRequest *request, ::UpdateClientResponse *response,
    ::google::protobuf::Closure *done) {
  channel_->CallMethod(descriptor()->method(0), controller, request, response,
                       done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::UpdateClientRequest *
Arena::CreateMaybeMessage<::UpdateClientRequest>(Arena *arena) {
  return Arena::CreateMessageInternal<::UpdateClientRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::UpdateClientResponse *
Arena::CreateMaybeMessage<::UpdateClientResponse>(Arena *arena) {
  return Arena::CreateMessageInternal<::UpdateClientResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
